
Intersectie Observator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000564  00000000  00000000  00000aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f3  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000398  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000019fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 01 	call	0x290	; 0x290 <main>
  74:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <schimbare_stare_A_and_B>:
volatile uint16_t ms_count = 0, ms_count2 = 0;
volatile uint8_t semaforA_state = 0;
volatile uint8_t semaforB_state = 0, led_state = 0, led2_state = 0;

void schimbare_stare_A_and_B() {
	switch (semaforA_state) {
  7c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <semaforA_state>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	b1 f0       	breq	.+44     	; 0xb0 <schimbare_stare_A_and_B+0x34>
  84:	18 f0       	brcs	.+6      	; 0x8c <schimbare_stare_A_and_B+0x10>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	49 f1       	breq	.+82     	; 0xdc <schimbare_stare_A_and_B+0x60>
  8a:	08 95       	ret
		case 0:
		PORTB = 0b00001001;
  8c:	89 e0       	ldi	r24, 0x09	; 9
  8e:	88 bb       	out	0x18, r24	; 24
		PORTD = 0b00000100;
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	82 bb       	out	0x12, r24	; 18
		PORTC = 0b00000010 | 0b00100000;
  94:	82 e2       	ldi	r24, 0x22	; 34
  96:	85 bb       	out	0x15, r24	; 21
		ms_count = 4000;
  98:	80 ea       	ldi	r24, 0xA0	; 160
  9a:	9f e0       	ldi	r25, 0x0F	; 15
  9c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ms_count+0x1>
  a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ms_count>
		semaforA_state = 1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <semaforA_state>
		TCCR2 = 0b00001111;
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	85 bd       	out	0x25, r24	; 37
		break;
  ae:	08 95       	ret

		case 1:
		PORTB = 0b00010010;
  b0:	82 e1       	ldi	r24, 0x12	; 18
  b2:	88 bb       	out	0x18, r24	; 24
		PORTD = 0b00000010;
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	82 bb       	out	0x12, r24	; 18
		PORTC = 0b00000010 | 0b00100000;
  b8:	92 e2       	ldi	r25, 0x22	; 34
  ba:	95 bb       	out	0x15, r25	; 21
		ms_count = 2000;
  bc:	20 ed       	ldi	r18, 0xD0	; 208
  be:	37 e0       	ldi	r19, 0x07	; 7
  c0:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <ms_count+0x1>
  c4:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <ms_count>
		semaforA_state = 2;
  c8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <semaforA_state>
		semaforB_state = 0;
  cc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <semaforB_state>
		TCCR2 = 0;
  d0:	15 bc       	out	0x25, r1	; 37
		PORTA &= ~(1 << PA0);
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	8b bb       	out	0x1b, r24	; 27
		TCCR1B = 0;
  d8:	1e bc       	out	0x2e, r1	; 46
		break;
  da:	08 95       	ret

		case 2:
		PORTB = 0b00100100;
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	88 bb       	out	0x18, r24	; 24
		switch (semaforB_state) {
  e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <semaforB_state>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	99 f0       	breq	.+38     	; 0x10e <schimbare_stare_A_and_B+0x92>
  e8:	18 f0       	brcs	.+6      	; 0xf0 <schimbare_stare_A_and_B+0x74>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	09 f1       	breq	.+66     	; 0x130 <schimbare_stare_A_and_B+0xb4>
  ee:	08 95       	ret
			case 0:
			PORTD = 0b00000001;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	82 bb       	out	0x12, r24	; 18
			PORTC = 0b00000001 | 0b00001000;
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	95 bb       	out	0x15, r25	; 21
			ms_count = 4000;
  f8:	20 ea       	ldi	r18, 0xA0	; 160
  fa:	3f e0       	ldi	r19, 0x0F	; 15
  fc:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <ms_count+0x1>
 100:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <ms_count>
			semaforB_state = 1;
 104:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <semaforB_state>
			TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 108:	8d e0       	ldi	r24, 0x0D	; 13
 10a:	8e bd       	out	0x2e, r24	; 46
			break;
 10c:	08 95       	ret

			case 1:
			PORTD = 0b00000010;
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	82 bb       	out	0x12, r24	; 18
			PORTC = 0b00000001 | 0b00001000;
 112:	99 e0       	ldi	r25, 0x09	; 9
 114:	95 bb       	out	0x15, r25	; 21
			ms_count = 2000;
 116:	20 ed       	ldi	r18, 0xD0	; 208
 118:	37 e0       	ldi	r19, 0x07	; 7
 11a:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <ms_count+0x1>
 11e:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <ms_count>
			semaforB_state = 2;
 122:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <semaforB_state>
			TCCR1B = 0;
 126:	1e bc       	out	0x2e, r1	; 46
			PORTA &= ~(1 << PA1);
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	8b bb       	out	0x1b, r24	; 27
			break;
 12e:	08 95       	ret

			case 2:
			PORTD = 0b00000100;
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	82 bb       	out	0x12, r24	; 18
			PORTC = 0b00000010 | 0b00100000;
 134:	82 e2       	ldi	r24, 0x22	; 34
 136:	85 bb       	out	0x15, r24	; 21
			ms_count = 4000;
 138:	80 ea       	ldi	r24, 0xA0	; 160
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ms_count+0x1>
 140:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ms_count>
			semaforB_state = 0;
 144:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <semaforB_state>
			semaforA_state = 0;
 148:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <semaforA_state>
			TCCR2 = 0b00001111;
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	85 bd       	out	0x25, r24	; 37
 150:	08 95       	ret

00000152 <__vector_10>:
		}
		break;
	}
}

ISR(TIMER0_COMP_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	if (ms_count > 0) {
 174:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ms_count>
 178:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ms_count+0x1>
 17c:	89 2b       	or	r24, r25
 17e:	89 f0       	breq	.+34     	; 0x1a2 <__vector_10+0x50>
		ms_count--;
 180:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ms_count>
 184:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ms_count+0x1>
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ms_count+0x1>
 18e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ms_count>
		if (ms_count == 0) {
 192:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ms_count>
 196:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ms_count+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	11 f4       	brne	.+4      	; 0x1a2 <__vector_10+0x50>
			schimbare_stare_A_and_B();
 19e:	0e 94 3e 00 	call	0x7c	; 0x7c <schimbare_stare_A_and_B>
		}
	}
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_4>:

ISR(TIMER2_COMP_vect) {
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
	led_state = !led_state;
 1d2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <led_state>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	91 11       	cpse	r25, r1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <led_state>
	if (led_state) {
 1e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <led_state>
 1e4:	88 23       	and	r24, r24
 1e6:	21 f0       	breq	.+8      	; 0x1f0 <__vector_4+0x2c>
		PORTA |= (1 << PA0);
 1e8:	8b b3       	in	r24, 0x1b	; 27
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_4+0x32>
		} else {
		PORTA &= ~(1 << PA0);
 1f0:	8b b3       	in	r24, 0x1b	; 27
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	8b bb       	out	0x1b, r24	; 27
	}
}
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
	if (semaforA_state == 2) {
 212:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <semaforA_state>
 216:	82 30       	cpi	r24, 0x02	; 2
 218:	99 f4       	brne	.+38     	; 0x240 <__vector_7+0x3c>
		led2_state = !led2_state;
 21a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	91 11       	cpse	r25, r1
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (led2_state) {
 228:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 22c:	88 23       	and	r24, r24
 22e:	21 f0       	breq	.+8      	; 0x238 <__vector_7+0x34>
			PORTA |= (1 << PA1);
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	82 60       	ori	r24, 0x02	; 2
 234:	8b bb       	out	0x1b, r24	; 27
 236:	07 c0       	rjmp	.+14     	; 0x246 <__vector_7+0x42>
			} else {
			PORTA &= ~(1 << PA1);
 238:	8b b3       	in	r24, 0x1b	; 27
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	8b bb       	out	0x1b, r24	; 27
 23e:	03 c0       	rjmp	.+6      	; 0x246 <__vector_7+0x42>
		}
		} else {
		PORTA &= ~(1 << PA1);
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	8b bb       	out	0x1b, r24	; 27
	}
}
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <init_timer0>:

void init_timer0() {
	TCCR0 = 0b00001011;
 254:	8b e0       	ldi	r24, 0x0B	; 11
 256:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 258:	12 be       	out	0x32, r1	; 50
	OCR0 = 125;
 25a:	8d e7       	ldi	r24, 0x7D	; 125
 25c:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= 0b00000010;
 25e:	89 b7       	in	r24, 0x39	; 57
 260:	82 60       	ori	r24, 0x02	; 2
 262:	89 bf       	out	0x39, r24	; 57
 264:	08 95       	ret

00000266 <init_timer2>:
}

void init_timer2() {
	TCCR2 = 0b00001111;
 266:	8f e0       	ldi	r24, 0x0F	; 15
 268:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 0;
 26a:	14 bc       	out	0x24, r1	; 36
	OCR2 = 250;
 26c:	8a ef       	ldi	r24, 0xFA	; 250
 26e:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 0b10000000;
 270:	89 b7       	in	r24, 0x39	; 57
 272:	80 68       	ori	r24, 0x80	; 128
 274:	89 bf       	out	0x39, r24	; 57
 276:	08 95       	ret

00000278 <init_timer1>:
}

void init_timer1() {
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 278:	8d e0       	ldi	r24, 0x0D	; 13
 27a:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 27c:	1d bc       	out	0x2d, r1	; 45
 27e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 250;
 280:	8a ef       	ldi	r24, 0xFA	; 250
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9b bd       	out	0x2b, r25	; 43
 286:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);
 288:	89 b7       	in	r24, 0x39	; 57
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	89 bf       	out	0x39, r24	; 57
 28e:	08 95       	ret

00000290 <main>:
}

int main() {
	DDRB = 0b11111111;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b11111111;
 294:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;
 296:	84 bb       	out	0x14, r24	; 20
	DDRA = 0b11111111;
 298:	8a bb       	out	0x1a, r24	; 26

	init_timer0();
 29a:	0e 94 2a 01 	call	0x254	; 0x254 <init_timer0>
	init_timer2();
 29e:	0e 94 33 01 	call	0x266	; 0x266 <init_timer2>
	init_timer1();
 2a2:	0e 94 3c 01 	call	0x278	; 0x278 <init_timer1>
	schimbare_stare_A_and_B();
 2a6:	0e 94 3e 00 	call	0x7c	; 0x7c <schimbare_stare_A_and_B>
	SREG |= (1 << 7);
 2aa:	8f b7       	in	r24, 0x3f	; 63
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	8f bf       	out	0x3f, r24	; 63
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <main+0x20>

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
